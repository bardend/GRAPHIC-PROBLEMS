#include<bits/stdc++.h>
using namespace std;
const int N=1000+5;
#define FAST ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)

const int dx[] = { -1 , +0 , +1 , +0 , +1 , +1 , -1 , -1 };
const int dy[] = { +0 , -1 , +0 , +1 , +1 , -1 , +1 , -1 };
 
int n;
int q_x,q_y,k_x,k_y,f_x,f_y;
bool visit[N][N];

bool valid(int nx,int ny){
    return (nx>=0 and nx<=n-1 and ny>=0 and ny<=n-1);
}
void dfs(int x,int y){
    visit[x][y]=true;
    if(x==f_x and y==f_y){
        cout<<"YES"<<'\n';
        exit(0);
    }
    for(int i=0;i<8;i++){
        int new_x=x+dx[i];
        int new_y=y+dy[i];
        if(!visit[new_x][new_y] and valid(new_x,new_y))
            dfs(new_x,new_y);
    }
}
int main(){
	FAST;
    cin>>n;
    cin>>q_x>>q_y;
    cin>>k_x>>k_y;
    cin>>f_x>>f_y;
    q_x--;
    q_y--;
    k_x--;
    k_y--;
    f_x--;
    f_y--;
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++){
            if(i==q_x || j==q_y)visit[i][j]=true;
            else if(abs(q_x-i)==abs(q_y-j))visit[i][j]=true; 
            else visit[i][j]=false;
        }
    
    dfs(k_x,k_y);
    cout<<"NO"<<'\n';
    return 0;
}
